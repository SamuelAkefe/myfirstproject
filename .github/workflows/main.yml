name: Deploy Infrastructure and Frontend

on: 
  push:
    branches: 
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_ARN}}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: 1.13.2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan 
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform 

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          echo "s3_bucket=${{ steps.terraform-outputs.outputs.s3_bucket }} 
          cloudfront_id: ${{ steps.terraform-outputs.outputs.cloudfront_id }}

  deploy-frontend:
    name: Build and Deploy Frontend 
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build 
        working-directory: ./frontend 
        env: 
          NODE_ENV: production 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 sync ./frontend/build s3://${{ needs.deploy-infrastructure.outputs.s3_bucket}} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "*.map"

          # Upload index.html separately with no-cache
          aws s3 cp ./frontend/build/index.html s3://${{ needs.deploy-infrastructure.outputs.s3_bucket }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate"
      
      - name: Invalidate CloudFront cache
        run:
          aws cloudfront create-invalidation
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront_id }} \
            --paths "/*"
          echo "âœ… CloudFront cache invalidated!"
          
        
          
        
    
